#!/usr/bin/env perl -w

###
# Pod Documentation
###

=head1 NAME

reference_statistics

=head1 SYNOPSIS

Usage: chance_of_synonymous_changes.pl -i genome.gbk -o statistics.tab

Calculate statistics about sites at risk for synonymous changes in a genome. Counts
synonymous changes to AA coding and optionally STOP codons.

=head1 DESCRIPTION

=over 

=item B<-i|--input> <file path>  REQUIRED

Genbank file or files containing proteins of interest.

=item B<-o|--output> <file path> REQUIRED

Tab delimited output file.

=item B<-s|--count-synonymous-stop-codons>

Count stop codons (and "synonymous" mutations in them) 
as part of a reading frame.

=back

=head1 AUTHOR

Jeffrey Barrick

=head1 COPYRIGHT

Copyright 2008.  All rights reserved.

=cut

###
# End Pod Documentation
###
use strict;

use FindBin;
use lib $FindBin::Bin;
$ENV{PATH} = "$ENV{PATH}:" . $FindBin::Bin;

#### Paths to Locally Installed Modules ####
use Config;
use lib $FindBin::Bin . "/../lib/perl5";
use lib $FindBin::Bin . "/../lib/perl5/$Config{version}";
use lib $FindBin::Bin . "/../lib/perl5/$Config{archname}";
use lib $FindBin::Bin . "/../lib/perl5/site_perl/$Config{archname}/$Config{version}";

use lib $FindBin::Bin . "/../lib/perl5/site_perl";
use lib $FindBin::Bin . "/../lib/perl5/site_perl/$Config{archname}";
use lib $FindBin::Bin . "/../lib/perl5/site_perl/$Config{archname}/$Config{version}";

use lib $FindBin::Bin . "/../lib/perl5/vendor_perl";
use lib $FindBin::Bin . "/../lib/perl5/vendor_perl/$Config{archname}";
use lib $FindBin::Bin . "/../lib/perl5/vendor_perl/$Config{archname}/$Config{version}";

use Data::Dumper;

use Bio::SeqIO;
use Bio::Seq;
use Bio::Tools::SeqStats;

use Tie::Array::Packed;

use GenomeDiff::SynonymousNonsynonymous;

#Get options
use Getopt::Long;
use Pod::Usage;
my ($help, $man);
my (@input_files, $output_file);
my $translation_table;
my $verbose;

#pod2usage(1) if (scalar @ARGV == 0);
my $count_synonymous_stop_codons = 0;
GetOptions(
	'help|?' => \$help, 'man' => \$man,
	'input-file|i=s' => \@input_files,
	'output-file|o=s' => \$output_file,
	'count-synonymous-stop-codons|s' => \$count_synonymous_stop_codons,
	'verbose|v' => \$verbose,
);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(1) if (!@input_files);
pod2usage(1) if (!$output_file);

open OUT, ">$output_file" or die "Could not open $output_file\n";

my $bp_change_to_index = {
	"A-G" => 0, "T-C" => 0,
	"A-C" => 1, "T-G" => 1,
	"A-T" => 2, "T-A" => 2,
	"G-A" => 3, "C-T" => 3,
	"G-T" => 4, "C-A" => 4,
	"G-C" => 5, "C-G" => 5,	
};

my @bp_change_list = (
	["A-G", "T-C"],
	["A-C", "T-G"],
	["A-T", "T-A"],
	["G-A", "C-T"],
	["G-T", "C-A"],
	["G-C", "C-G"],
);

my @bp_change_label_list = (
	["A:T", "G:C"],
	["A:T", "C:G"],
	["A:T", "T:A"],
	["G:C", "A:T"],
	["G:C", "T:A"],
	["G:C", "C:G"],
);

my @r_bp_change_label_list = (
	"AT.GC",
	"AT.CG",
	"AT.TA",
	"CG.TA",
	"CG.AT",
	"CG.GC",
);

my $nss;
my %codon_to_aa;
my %aa_to_codons;
my %codon_synonymous_changes;
my %codon_nonsynonymous_changes;
my %codon_num_synonymous_changes;
my %codon_position_mutation_synonymous;

my %nonsynonymous_mutations;
my %synonymous_mutations;

my $total_num_synonymous_changes = 0;
my $total_num_nonsynonymous_changes = 0;
my $total_codon_nt_positions = 0;
my $total_nt_position = 0;

my @nt_list = ('A', 'G', 'T', 'C');


#print STDERR Dumper(\%highly_expressed);

my $total_bases;

##Process sequences
my @fragments = ();
my @proteins = ();
my $total_codons = 0;
my $total_orfs = 0;

#lower numbers get preference
my $k_nt_type_PROTEIN = 0;
my $k_nt_type_RNA = 1;
my $k_nt_type_PSEUDOGENE = 2;
my $k_nt_type_INTERGENIC = 3;
my $k_nt_type_MAX = 4;

#Load sequence
foreach my $input_file (@input_files)
{
	print STDERR "Loading $input_file...\n";

	my $in = Bio::SeqIO->new(-file => "<$input_file", -format => "genbank");
	$in or die "Could not open sequence file $input_file\n";
	while (my $seq = $in->next_seq)
	{	
		my $seq_length = $seq->length; #BioPerl is slow...
		
		my $monomers = Bio::Tools::SeqStats->count_monomers($seq);
		foreach my $base (sort keys %$monomers) 
		{
			$total_bases->{$base} += $monomers->{$base};
	    	#print STDERR "Number of bases of type ", $base, " = ", $monomers->{$base},"\n";
	    	print STDERR "WARNING: Nonstandard base in sequence: $base\n" if (($base ne 'A') && ($base ne 'T') && ($base ne 'C') && ($base ne 'G'));
		}

	
		$total_nt_position += $seq->length;
		
		print STDERR "Allocating genome arrays...\n";
		
		my @nt_change_is_nonsynonymous;
		$#nt_change_is_nonsynonymous = $seq_length * 6;  		
		for (my $i=0; $i<$seq_length * 6; $i++) {
			$nt_change_is_nonsynonymous[$i] = 0;
		}
		
		my @nt_type;
		$#nt_type = $seq_length;  
		for (my $i=0; $i<$seq_length; $i++) {
			$nt_type[$i] = $k_nt_type_INTERGENIC;
		}
		
			
		my $fragment;
		$fragment->{accession_version} = $seq->accession() . "." . $seq->version();
		$fragment->{description} = $seq->description();
		print STDERR "$fragment->{description}\n";		
		push @fragments, $fragment;
		
		my @feature_list = $seq->get_SeqFeatures(); # just top level features
		
		##Record proteins
		print STDERR "Parsing feature list...\n";
		
		my $prev_gene;
		FEATURE: foreach my $f (@feature_list) 
		{
			## figure out position
			my @Location_List = $f->location->each_Location();
			
			## Record three categories: noncoding (RNA genes), pseudogenes, protein coding genes, intergenic (last is assumed if others not true)
			if (($f->primary_tag eq 'tRNA') || ($f->primary_tag eq 'rRNA') ) {
				
				foreach my $loc (@Location_List) {
					for (my $i=$loc->start; $i<=$loc->end; $i++) {
						$nt_type[$i-1] = $k_nt_type_RNA if ($nt_type[$i-1] > $k_nt_type_RNA);
					}
				}
				next FEATURE;				
			}
			
			next FEATURE if ($f->primary_tag ne 'CDS');
			
			if ($f->has_tag("pseudo") || ( ($f->location->start_pos_type ne 'EXACT') || ($f->location->end_pos_type ne 'EXACT')) ) {
				
				foreach my $loc (@Location_List) {
					for (my $i=$loc->start; $i<=$loc->end; $i++) {
						$nt_type[$i-1] = $k_nt_type_PSEUDOGENE if ($nt_type[$i-1] > $k_nt_type_PSEUDOGENE);						
					}
				}
				next FEATURE;
			}
			
			#no gene fragments!
					
			$total_orfs++;
			
			my $p; 
			$p->{start} = $Location_List[0]->start if (!defined $p->{start});
			$p->{end} = $Location_List[$#Location_List]->end;
			$p->{strand} =  $f->location->strand;			$p->{gene} = GetTag($f, "gene");
			$p->{name} = ($p->{gene}) ? $p->{gene} : GetTag($f, "locus_tag");
			$p->{description} = GetTag($f, "product");
			$p->{locus_tag} = GetTag($f, "locus_tag");
			$p->{gene} = '-' if (!$p->{gene});

			#print STDERR "$p->{gene}\n";
			
			#Load a list of synonyms, format is likely to vary in each file...
			push @{$p->{synonyms}}, $p->{gene} if ($p->{gene});
			push @{$p->{synonyms}}, $p->{locus_tag} if ($p->{locus_tag});	


					
			## Use the correct genetic code
			## Generate new pretermination table if this one has not been seen yet.
			$p->{translation_table} = GetTag($f, "transl_table");
			die "No translation table for CDS!" if (!$p->{translation_table});
			die if (defined $translation_table && ($translation_table != $p->{translation_table}));
			
			if (!defined $translation_table)
			{
				$translation_table = $p->{translation_table};
				print STDERR "Using translation table: $p->{translation_table}\n";

				$nss =  CAMP::SynonymousNonsynonymous->new(	
														'translation_table' => $p->{translation_table}, 
														'count_synonymous_stop_codons' => $count_synonymous_stop_codons,
													);
				%codon_synonymous_changes = %{$nss->{codon_synonymous_changes}};
				%codon_num_synonymous_changes = %{$nss->{codon_num_synonymous_changes}};
				%codon_nonsynonymous_changes = %{$nss->{codon_nonsynonymous_changes}};
				%codon_to_aa = %{$nss->{codon_to_aa}};
				%aa_to_codons = %{$nss->{aa_to_codons}};
				%codon_position_mutation_synonymous = %{$nss->{codon_position_mutation_synonymous}};
				
				#print STDERR Dumper(%codon_num_synonymous_changes);
				#print STDERR Dumper(%codon_synonymous_changes, %codon_nonsynonymous_changes, %codon_to_aa, %aa_to_codons);

			}
			elsif ($translation_table != $p->{translation_table})
			{
				#no need to die, but downstream programs need to worry about this
				die "Different translation tables used in the same organism! $translation_table and $p->{translation_table}\n";
			}
									
			# Piece together the gene
			# Code should be savvy to an internal
			# frameshift (bacterial) or intron (eukaryotic).
			$p->{nt_seq} = '';
			my @gene_positions; #nt positions in referencethat correspond to each base of nt_seq
			my $on_nt_index = 0;
			foreach my $loc (@Location_List)
			{
				my $add_seq = $seq->trunc($loc->start, $loc->end);
				my $on_nt;
				if ($p->{strand} == -1)
				{
					$on_nt = $loc->end;
					$add_seq = $add_seq->revcom;
					$p->{nt_seq} = $add_seq->seq . $p->{nt_seq};
				}
				else
				{
					$on_nt = $loc->start;
					$p->{nt_seq} = $p->{nt_seq} . $add_seq->seq;
				}
				
				for (my $pos = $loc->start-1;  $pos < $loc->end; $pos++)
				{
					while ($on_nt_index < length $p->{nt_seq})
					{
						$gene_positions[$on_nt_index] = $on_nt-1;
						$on_nt_index++;
						$on_nt += $p->{strand};
					}
				}
			}
			
			#print Dumper($p);
			
			#Split to codons
			my $nt_seq = $p->{nt_seq};
			my $codon_index = -1;
			CODON: while (my $codon = substr $nt_seq, 0, 3, "") {
				$codon_index++;
				
				#add to codon list and keep track of codons used
				if (length $nt_seq == 0) {
					if ($codon_to_aa{$codon} ne '*') {
						print STDERR "WARNING: Reading frame has no stop codon: $p->{gene}|$p->{locus_tag}\n";
					}
				}
				
				#check for stop codon
				if ($codon_to_aa{$codon} eq '*') {
					if (length $nt_seq > 0) {
						print STDERR "WARNING: Stop codon ($codon) is within gene: $p->{gene}|$p->{locus_tag}\n";
					}
					## count or not?
					next CODON if (!$count_synonymous_stop_codons);
				}
				
				push @{$p->{codon_list}}, $codon;
				
				
				#print $nt_seq . "\n";
				#print $codon . "\n";
				
				if (length $codon != 3) {
					print STDERR "ERROR: Codon that is not of length 3 found!\n";
					print STDERR $nt_seq . "\n";
					print STDERR $codon . "\n";
				 	print STDERR Dumper($p);
				 	die;
				}
				
				print "  $codon\n" if ($verbose);
				
				## update genome synonymous calls
				## Note that stop codon has not been removed!
				foreach my $codon_position (1..3)
				{ 
					my $gene_position = $codon_index * 3 + $codon_position - 1;
					my $genome_position = $gene_positions[$gene_position];
					
					my $from_nt = substr $p->{nt_seq}, $gene_position, 1;
					## note -> this is already on the coding strand
					
					print "  $codon_position:$from_nt ($gene_position, $genome_position)\n" if ($verbose);
					
					## count this position as in a gene
					$nt_type[$genome_position] = $k_nt_type_PROTEIN if ($nt_type[$genome_position] > $k_nt_type_PROTEIN);
					
										
					TO_NT: foreach my $to_nt (@nt_list) {
						next TO_NT if ($from_nt eq $to_nt);
						#print STDERR "$genome_position $codon_index $gene_position $from_nt-$to_nt" . "\n";
						
						if (!$codon_position_mutation_synonymous{$codon . "_" . $codon_position . "_" . $from_nt . "_" . $to_nt}) {							
							$nt_change_is_nonsynonymous[$genome_position * 6 + $bp_change_to_index->{"$from_nt-$to_nt"} ] = 1;
						}
					}		
				} # end codon position
				
			} ## end codon
			

						
			#Save length in AA
			$p->{length} = scalar @{$p->{codon_list}};
		
			#Tabulate all codons used
			CODON: for (my $on_codon = 0; $on_codon < scalar @{$p->{codon_list}}; $on_codon++)
			{
				my $codon = $p->{codon_list}->[$on_codon];
			
				#Need to catch these with /transl_except=(pos:1546010..1546012,aa:Sec)

				if (!defined $codon_to_aa{$codon})
				{
					print STDERR "Undefined translation for codon ($codon) in the middle of this gene: $p->{gene}|$p->{locus_tag}\n";
					#print STDERR Dumper($p);
					next CODON;
				}
				elsif ( ($codon_to_aa{$codon} eq '*') && ($on_codon != scalar @{$p->{codon_list}}) - 1 )
				{
					print STDERR "Stop codon ($codon) in the middle of this gene: $p->{gene}|$p->{locus_tag}\n";
					#print STDERR Dumper($p);
					next CODON;
				} 
			}
			
		} ## end feature
		
		
		
		###
		#  Per-Sequence Counting Loop
		###
		
		my $sequence = $seq->seq;
		print STDERR "Tallying per-position information...\n";

		## Now go through the sequence and normalize expectations for overlapping genes
		## If it is marked as nonsynonymous, then it's nonsynonymous even if others are synonymous
		for (my $genome_position=0; $genome_position<$seq_length; $genome_position++) {
			
			## only count coding positions
			next if ($nt_type[$genome_position] == $k_nt_type_PROTEIN);
			$total_codon_nt_positions++;

			my $from_nt = substr $sequence, $genome_position, 1;

			TO_NT: foreach my $to_nt (@nt_list) {

				next TO_NT if ($from_nt eq $to_nt);
				#print STDERR "$genome_position $codon_index $gene_position $from_nt-$to_nt" . "\n";

				my $key = "$from_nt-$to_nt";

					
				if ($nt_change_is_nonsynonymous[$genome_position * 6 + $bp_change_to_index->{"$from_nt-$to_nt"} ] == 1) {
					$nonsynonymous_mutations{$key}++;
					$total_num_nonsynonymous_changes++;
				} else {
					$synonymous_mutations{$key}++;
					$total_num_synonymous_changes++;
				}
			}
		}

		###
		#  / Per-Sequence Counting Loop
		###

		print STDERR "Printing output...\n";
		
		open OUTNT, ">$output_file.per_nt.tab" or die "Could not open $output_file.per_nt.tab\n";
		my @syn_labels = ("syn-AT.GC-CG.TA", "syn-AT.CG-CG.AT", "syn-AT.TA-CG.GC");
		@syn_labels = map { $_ . ".syn" } @syn_labels;
		my @tot_labels = ('Type');

		print OUTNT +join("\t", @tot_labels, @syn_labels) . "\n";
		foreach (my $i=0; $i<$seq_length; $i++)
		{
			my @tot_list;

			my $from_nt = substr $sequence, $i, 1;
			
			my $is_AT = 0;
			$is_AT = (($from_nt eq 'A') || ($from_nt eq 'T')) ? 1 : 0;
						
			push @tot_list, $nt_type[$i];		
						
			my @syn_list = ();
			if ($nt_type[$i] == $k_nt_type_PROTEIN) {

				my $j_offset = 0;
				$j_offset = 3 if (!$is_AT);
				for (my $j=0; $j < 3; $j++) {
					push @syn_list, ($nt_change_is_nonsynonymous[$i*6+$j+$j_offset] == 0) ? 1 : 0;
				}
			}
			
			#print "Position $i\n";
			#print "@ns_list\n";
			#print "@tot_list\n";
			#print "@syn_list\n";
			
			print OUTNT +join("\t", @tot_list, @syn_list) . "\n";
		}
	}
}



## print out the synonymous / nonsynonymous table
print OUT "#Probabilities of synonymous mutations (NCBI Translation Table $translation_table)\n";
print OUT +join("\t", 'aa', 'codon', 'synonymous_muts', 'total_muts') . "\n";
foreach my $aa (sort keys %aa_to_codons)
{
	foreach my $codon (sort @{$aa_to_codons{$aa}})
	{
		print OUT +join("\t", $aa, $codon, $codon_num_synonymous_changes{$codon}, 9) . "\n";
	}
}
print OUT "\n";

print OUT "#total_nt_positions\t$total_nt_position\n";
print OUT "#total_aa_coding_nt_positions\t$total_codon_nt_positions\n";
print OUT "\n";

my $total_possible_mutations = $total_nt_position * 3;
print OUT "#total_possible_mutations $total_possible_mutations\n";
my $total_possible_aa_coding_mutations = $total_codon_nt_positions * 3;
print OUT "#total_possible_aa_coding_mutations $total_possible_aa_coding_mutations\n";

print OUT "\n";
print OUT "#total_num_synonymous_changes\t$total_num_synonymous_changes\n";
print OUT "#total_num_nonsynonymous_changes\t$total_num_nonsynonymous_changes\n";

print OUT "\n";
my $chance_of_genome_mutation_synonymous = $total_num_synonymous_changes / $total_possible_mutations;
print OUT "#chance_of_genome_mutation_synonymous\t$chance_of_genome_mutation_synonymous\n";
my $chance_of_aa_coding_mutation_synonymous = $total_num_synonymous_changes / $total_possible_aa_coding_mutations;
print OUT "#chance_of_aa_coding_mutation_synonymous\t$chance_of_aa_coding_mutation_synonymous\n";

print OUT "\n";
print OUT "#Base distribution for entire genome\n";
print OUT +join("\t", 'base', 'num') . "\n";
foreach my $base (keys %$total_bases)
{
	print OUT +join("\t", $base, $total_bases->{$base}) . "\n";
}

print OUT "\n";
print OUT "#Probabilities of synonymous mutations given base change over entire genome (NCBI Translation Table $translation_table)\n";
print OUT +join("\t", "mutation", "fr_synonymous", "fr_nonsynonymous") . "\n";
foreach my $key (sort keys %nonsynonymous_mutations)
{
	next if ($nonsynonymous_mutations{$key} + $synonymous_mutations{$key} == 0);
	my $total = $nonsynonymous_mutations{$key} + $synonymous_mutations{$key};
	print OUT +join("\t",  $key, $synonymous_mutations{$key} / $total, $nonsynonymous_mutations{$key} / $total) . "\n";
}

## print out probabilities of all mutations GIVEN a synonymous mutation
print OUT "#Probabilities of base changes GIVEN synonymous mutation (NCBI Translation Table $translation_table)\n";
print OUT +join("\t", 'from-bp', 'to-bp', 'probability') . "\n";
	
#print Dumper(\%nonsynonymous_mutations);
#print Dumper(\@bp_change_list);
	
foreach (my $i = 0; $i < scalar @bp_change_list; $i++)
{
	my ($from_bp_change, $to_bp_change) = ($bp_change_list[$i]->[0], $bp_change_list[$i]->[1]);
	my $probability = ($synonymous_mutations{$from_bp_change} + $synonymous_mutations{$to_bp_change} ) / $total_num_synonymous_changes;	
	my ($from_bp, $to_bp) = ($bp_change_label_list[$i]->[0], $bp_change_label_list[$i]->[1]);
	print OUT +join("\t", $from_bp, $to_bp, $probability) . "\n";
}
print OUT "\n";


sub GetTag
{
	my ($Feature, $Tag, $Allow_Array) = @_;	
	$Allow_Array = 0 if (!defined $Allow_Array);
	
	return '' if (!$Feature->has_tag("$Tag"));
	my @Tag_Values = $Feature->get_tag_values("$Tag");
	return '' if (scalar @Tag_Values == 0);
	return $Tag_Values[0] if (!$Allow_Array);
	return @Tag_Values;
}	

