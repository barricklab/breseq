#!/usr/bin/env perl

###
# Pod Documentation
###

=head1 NAME

sam2html

=head1 SYNOPSIS

Usage: sam2html [-o output] database.bam reference.fasta REL606:1-100

Create an HTML alignment of a region. Region must not be too big!

=head1 DESCRIPTION

=over

=back

=head1 AUTHOR

Jeffrey Barrick
<barrick@msu.edu>

=head1 COPYRIGHT

Copyright 2009.  All rights reserved.

=cut

###
# End Pod Documentation
###


use strict;
use Data::Dumper;

use FindBin;
use lib $FindBin::Bin;

#### Paths to Locally Installed Modules ####
use lib $FindBin::Bin . "/../lib/perl5";
use lib $FindBin::Bin . "/../lib/perl5/site_perl";

use CGI qw/:standard/;

use Breseq::CoverageOutput;

#Get options
use Getopt::Long;
use Pod::Usage;
my ($help, $man, $verbose);
my $output_file;
my $pdf = 0;
my $resolution = 600;
my $total_only = 0;
my $text_output;
GetOptions(
	'help|?' => \$help, 'man' => \$man,
	'output|o=s' => \$output_file,
	'verbose|v' => \$verbose,
	'pdf' => \$pdf,
	'resolution|r=s' => \$resolution,
	'total-only|t' => \$total_only,
	'text-output|x' => \$text_output,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my ($bam_path, $fasta_path, @regions) = @ARGV;

die "No regions defined.\n" if (scalar @regions == 0);
die "No BAM file defined.\n" if (!$bam_path);
die "No fasta file defined.\n" if (!$fasta_path);

## Make drawings
if (!$text_output)
{
	foreach my $region (@regions)
	{
		my $co = Breseq::CoverageOutput->new(-fasta => $fasta_path, -bam => $bam_path);
		$co->plot_coverage($region, undef, {verbose=>$verbose, resolution=>$resolution, pdf => $pdf, total_only => $total_only});
	}
}
##Tabulate coverage
else {
	my $tmp_coverage = "coverage.tab";
	
	foreach my $region (@regions)
	{	
		$region = Breseq::Shared::check_region($region, $bam);
		my ($seq_id, $start, $end) = split /[:-]/, $region;
		Breseq::CoverageOutput::tabulate_coverage($bam_path, $fasta_path, $tmp_coverage, $seq_id, $start, $end, 1) = @_;
		
		open COV, "<$tmp_coverage";
		my @ll = <COV>;
		chomp @ll;
		shift @ll; #header
		my $n = scalar @ll;
		my $avg = 0;
		my $variance = 0;
		foreach my $l (@ll)
		{
			my @sl = split "\t", $l;
			$avg += $sl[1] + $sl[2];
		}
		$avg /= $n;
		
		foreach my $l (@ll)
		{
			my @sl = split "\t", $l;
			$variance += ($avg - ($sl[1] + $sl[2]))**2;
		}
		
		close COV;
		unlink $tmp_coverage;

		print "$region\t$n\t$avg\t$variance\n";
	}
}

