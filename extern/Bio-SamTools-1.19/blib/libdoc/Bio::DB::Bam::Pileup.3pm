.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Bam::Pileup 3"
.TH Bio::DB::Bam::Pileup 3 "2010-05-28" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Bam::Pileup \-\- Object passed to pileup() callback
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See \*(L"The generic \fIfetch()\fR and \fIpileup()\fR methods\*(R" in Bio::DB::Sam for how
this object is passed to pileup callbacks.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Bio::DB::Bam::Pileup object (or a Bio::DB::Bam::PileupWrapper
object) is passed to the callback passed to the Bio::DB::Sam\->\fIpileup()\fR
method for each column in a sequence alignment. The only difference
between the two is that the latter returns the more convenient
Bio::DB::Bam::AlignWrapper objects in response to the \fIalignment()\fR
method, at the cost of some performance loss.
.Sh "Methods"
.IX Subsection "Methods"
.ie n .IP "$alignment\fR = \f(CW$pileup\->alignment" 4
.el .IP "\f(CW$alignment\fR = \f(CW$pileup\fR\->alignment" 4
.IX Item "$alignment = $pileup->alignment"
Return the Bio::DB::Bam::Alignment or Bio::DB::Bam::AlignWrapper
object representing the aligned read.
.ie n .IP "$alignment\fR = \f(CW$pileup\->b" 4
.el .IP "\f(CW$alignment\fR = \f(CW$pileup\fR\->b" 4
.IX Item "$alignment = $pileup->b"
This method is an alias for \fIalignment()\fR. It is available for
compatibility with the C \s-1API\s0.
.ie n .IP "$qpos\fR = \f(CW$pileup\->qpos" 4
.el .IP "\f(CW$qpos\fR = \f(CW$pileup\fR\->qpos" 4
.IX Item "$qpos = $pileup->qpos"
Return the position of this aligned column in read coordinates, using
zero-based coordinates.
.ie n .IP "$pos\fR  = \f(CW$pileup\->pos" 4
.el .IP "\f(CW$pos\fR  = \f(CW$pileup\fR\->pos" 4
.IX Item "$pos  = $pileup->pos"
Return the position of this aligned column in read coordinates, using
1\-based coordinates.
.ie n .IP "$indel\fR = \f(CW$pileup\->indel" 4
.el .IP "\f(CW$indel\fR = \f(CW$pileup\fR\->indel" 4
.IX Item "$indel = $pileup->indel"
If this column is an indel, return a positive integer for an insertion
relative to the reference, a negative integer for a deletion relative
to the reference, or 0 for no indel at this column.
.ie n .IP "$is_del\fR = \f(CW$pileup\->is_del" 4
.el .IP "\f(CW$is_del\fR = \f(CW$pileup\fR\->is_del" 4
.IX Item "$is_del = $pileup->is_del"
True if the base on the padded read is a deletion.
.ie n .IP "$level\fR  = \f(CW$pileup\->level" 4
.el .IP "\f(CW$level\fR  = \f(CW$pileup\fR\->level" 4
.IX Item "$level  = $pileup->level"
If \fIpileup()\fR or \fIfast_pileup()\fR was invoked with the \*(L"keep_level\*(R" flag,
then this method will return a positive integer indicating the level
of the read in a printed multiple alignment.
.ie n .IP "$pileup\->is_head" 4
.el .IP "\f(CW$pileup\fR\->is_head" 4
.IX Item "$pileup->is_head"
.PD 0
.ie n .IP "$pileup\->is_tail" 4
.el .IP "\f(CW$pileup\fR\->is_tail" 4
.IX Item "$pileup->is_tail"
.PD
These fields are defined in bam.h but their interpretation is obscure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Perl, Bio::DB::Sam, Bio::DB::Bam::Alignment, Bio::DB::Bam::Constants
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@oicr.on.ca>.
<lincoln.stein@bmail.com>
.PP
Copyright (c) 2009 Ontario Institute for Cancer Research.
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
