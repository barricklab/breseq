.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Bam::Query 3"
.TH Bio::DB::Bam::Query 3 "2010-05-28" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Bam::Query \-\- Object representing the query portion of a BAM/SAM alignment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Given an alignment retrieved from a Bio::DB::Sam database,
.PP
.Vb 1
\& my $query = $alignment\->query;
\&
\& my $name   = $query\->display_name;
\& my $start  = $query\->start;
\& my $end    = $query\->end;
\& my $dna    = $query\->dna;    # dna string
\& my $seq    = $query\->seq;    # Bio::PrimarySeq object
\& my @scores = $query\->qscore; # quality score
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple Bio::SeqFeatureI object that represents the query
part of a \s-1SAM\s0 alignment.
.Sh "Methods"
.IX Subsection "Methods"
.ie n .IP "$seqid\fR = \f(CW$query\->seq_id" 4
.el .IP "\f(CW$seqid\fR = \f(CW$query\fR\->seq_id" 4
.IX Item "$seqid = $query->seq_id"
The name of the read.
.ie n .IP "$name\fR = \f(CW$query\->name" 4
.el .IP "\f(CW$name\fR = \f(CW$query\fR\->name" 4
.IX Item "$name = $query->name"
The read name (same as seq_id in this case).
.ie n .IP "$name\fR = \f(CW$query\->display_name" 4
.el .IP "\f(CW$name\fR = \f(CW$query\fR\->display_name" 4
.IX Item "$name = $query->display_name"
The read display_name (same as seq_id in this case).
.ie n .IP "$tag\fR = \f(CW$query\->primary_tag" 4
.el .IP "\f(CW$tag\fR = \f(CW$query\fR\->primary_tag" 4
.IX Item "$tag = $query->primary_tag"
The string \*(L"match\*(R".
.ie n .IP "$tag\fR = \f(CW$query\->source_tag" 4
.el .IP "\f(CW$tag\fR = \f(CW$query\fR\->source_tag" 4
.IX Item "$tag = $query->source_tag"
The string \*(L"sam/bam\*(R".
.ie n .IP "$start\fR = \f(CW$query\->start" 4
.el .IP "\f(CW$start\fR = \f(CW$query\fR\->start" 4
.IX Item "$start = $query->start"
The start of the match in read coordinates.
.ie n .IP "$end\fR = \f(CW$query\->end" 4
.el .IP "\f(CW$end\fR = \f(CW$query\fR\->end" 4
.IX Item "$end = $query->end"
The end of the match in read coordinates;
.ie n .IP "$len\fR = \f(CW$query\->length" 4
.el .IP "\f(CW$len\fR = \f(CW$query\fR\->length" 4
.IX Item "$len = $query->length"
The length of the read.
.ie n .IP "$seq\fR = \f(CW$query\->seq" 4
.el .IP "\f(CW$seq\fR = \f(CW$query\fR\->seq" 4
.IX Item "$seq = $query->seq"
A Bio::PrimarySeq representing the read sequence in \s-1REFERENCE\s0
orientation.
.ie n .IP "$scores\fR = \f(CW$query\->qscore" 4
.el .IP "\f(CW$scores\fR = \f(CW$query\fR\->qscore" 4
.IX Item "$scores = $query->qscore"
The read quality scores. In a list context, a list of integers equal
in length to the read sequence length. In a scalar context, an array
ref. The qscores are in \s-1REFERENCE\s0 sequence orientation.
.ie n .IP "$dna\fR = \f(CW$query\->dna" 4
.el .IP "\f(CW$dna\fR = \f(CW$query\fR\->dna" 4
.IX Item "$dna = $query->dna"
The \s-1DNA\s0 string in reference sequence orientation.
.ie n .IP "$strand\fR = \f(CW$query\->strand" 4
.el .IP "\f(CW$strand\fR = \f(CW$query\fR\->strand" 4
.IX Item "$strand = $query->strand"
If the query was reversed to align it, \-1. Otherwise +1.
.ie n .IP "$seq\fR = \f(CW$query\->subseq($start,$end)" 4
.el .IP "\f(CW$seq\fR = \f(CW$query\fR\->subseq($start,$end)" 4
.IX Item "$seq = $query->subseq($start,$end)"
Return a Bio::PrimarySeq object representing the requested subsequence
on the read.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Perl, Bio::DB::Sam, Bio::DB::Bam::Alignment, Bio::DB::Bam::Constants
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lincoln.stein@oicr.on.ca>.
<lincoln.stein@bmail.com>
.PP
Copyright (c) 2009 Ontario Institute for Cancer Research.
.PP
This package and its accompanying libraries is free software; you can
redistribute it and/or modify it under the terms of the \s-1GPL\s0 (either
version 1, or at your option, any later version) or the Artistic
License 2.0.  Refer to \s-1LICENSE\s0 for the full license text. In addition,
please see \s-1DISCLAIMER\s0.txt for disclaimers of warranty.
